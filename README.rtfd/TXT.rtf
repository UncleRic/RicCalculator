{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red24\green55\blue106;\red71\green106\blue151;}
\margl1440\margr1440\vieww20540\viewh8120\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
Ric's Calculator Assignment\
Notes\
\
\pard\pardeftab720
\cf2 This is a 72-hour coding exercise for an iOS developer position in Intel.\
Initial Language used: Swift 1.2.\
The updated version uses Swift 2.0.\
\
The following is a snapshot of the history graph used to store calculator entries:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Pasted Graphic.tiff \width3060 \height1900
}¬}\

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 There can be many permutations of code entry that will crash the NSExpression handler.\
For example, unbalanced parentheses, or duplicate decimal points.  \
\
It's best to filter out as many erroneous inputs as possible via regular expression parsing.\
\
Swift 1.2 lacks a bona fide exception handler that is now part of Swift 2.0+.\
\
However, Swift 2.0 apparently fails to trap exceptions generated via NSExpression class.\
\
\
- F.C. Lee\
------------------------------------------------------------------------------------------------------------------------------------------------------------------\
Debugging:\
Reference: clearHistory()\
\pard\tx529\pardeftab529\pardirnatural

\f2\b\fs22 \cf3 \kerning1\expnd0\expndtw0 \CocoaLigature0 (lldb) \cf0 po each.valueForKey("equation") as! String\
\pard\tx529\pardeftab529\pardirnatural

\f3\b0 \cf0 "6*8"\
\
}